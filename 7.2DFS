#include<bits/stdc++.h>
using namespace std;

void DFS(int start, vector<int> adj[], bool visited[]) {
    stack<int> s;
    s.push(start);

    while(!s.empty()) {
        int node = s.top();
        s.pop();

        if(!visited[node]) {
            cout << node << " ";
            visited[node] = true;
        }

        for(int i = 0; i < adj[node].size(); i++) {
            if(!visited[adj[node][i]]) {
                s.push(adj[node][i]);
            }
        }
    }
}

int main() {
    int vertices, edges;
    cout << "Enter number of vertices and edges: ";
    cin >> vertices >> edges;

    vector<int> adj[vertices+1];
    bool visited[vertices+1];

    cout << "Enter edges (u v): " << endl;
    for(int i = 0; i < edges; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u); // Remove this line for directed graph
    }

    memset(visited, false, sizeof(visited));

    int start_vertex;
    cout << "Enter starting vertex: ";
    cin >> start_vertex;

    cout << "DFS traversal: ";
    DFS(start_vertex, adj, visited);

    return 0;
}

